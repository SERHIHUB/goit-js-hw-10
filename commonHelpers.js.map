{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst input = document.querySelector('#datetime-picker');\nconst button = document.querySelector('button');\n\nconst timerDays = document.querySelector('[data-days]');\nconst timerHours = document.querySelector('[data-hours]');\nconst timerMinutes = document.querySelector('[data-minutes]');\nconst timerSeconds = document.querySelector('[data-seconds]');\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0].getTime() < Date.now()) {\n      iziToast.error({\n        title: 'ERROR',\n        message: 'Please choose a date in the future',\n        titleColor: '#ffffff',\n        messageColor: '#ffffff',\n        backgroundColor: '#EF4040',\n        position: 'topRight',\n      });\n\n      button.disabled = true;\n    } else {\n      button.disabled = false;\n    }\n  },\n};\n\nconst datePicker = flatpickr(input, options);\n\nlet userSelectedDate = null;\n\nfunction timerStart() {\n  userSelectedDate = setInterval(() => {\n    let deferenceDate = datePicker.selectedDates[0] - Date.now();\n    if (deferenceDate <= 0) {\n      clearInterval(userSelectedDate);\n      initialTime(convertMs(0));\n      return;\n    } else {\n      button.disabled = false;\n    }\n\n    initialTime(convertMs(deferenceDate));\n  }, 1000);\n}\n\nfunction initialTime({ days, hours, minutes, seconds }) {\n  timerDays.textContent = addLeadingZero(days);\n  timerHours.textContent = addLeadingZero(hours);\n  timerMinutes.textContent = addLeadingZero(minutes);\n  timerSeconds.textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nbutton.addEventListener('click', timerStart);\n"],"names":["input","button","timerDays","timerHours","timerMinutes","timerSeconds","options","selectedDates","iziToast","datePicker","flatpickr","userSelectedDate","timerStart","deferenceDate","initialTime","convertMs","days","hours","minutes","seconds","addLeadingZero","ms","value"],"mappings":"+IAMA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAS,SAAS,cAAc,QAAQ,EAExCC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAEtDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,GAAG,QAAO,EAAK,KAAK,OACpCC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,WAAY,UACZ,aAAc,UACd,gBAAiB,UACjB,SAAU,UAClB,CAAO,EAEDP,EAAO,SAAW,IAElBA,EAAO,SAAW,EAErB,CACH,EAEMQ,EAAaC,EAAUV,EAAOM,CAAO,EAE3C,IAAIK,EAAmB,KAEvB,SAASC,GAAa,CACpBD,EAAmB,YAAY,IAAM,CACnC,IAAIE,EAAgBJ,EAAW,cAAc,GAAK,KAAK,MACvD,GAAII,GAAiB,EAAG,CACtB,cAAcF,CAAgB,EAC9BG,EAAYC,EAAU,CAAC,CAAC,EACxB,MACN,MACMd,EAAO,SAAW,GAGpBa,EAAYC,EAAUF,CAAa,CAAC,CACrC,EAAE,GAAI,CACT,CAEA,SAASC,EAAY,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtDjB,EAAU,YAAckB,EAAeJ,CAAI,EAC3Cb,EAAW,YAAciB,EAAeH,CAAK,EAC7Cb,EAAa,YAAcgB,EAAeF,CAAO,EACjDb,EAAa,YAAce,EAAeD,CAAO,CACnD,CAEA,SAASJ,EAAUM,EAAI,CAQrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAE1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EAEpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EAEjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEArB,EAAO,iBAAiB,QAASW,CAAU"}